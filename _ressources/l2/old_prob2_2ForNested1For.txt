// this current code has 2 for loops nested within another for loop.
// issues - struggling to parallelize this.
void solveSecondA(const int rows, const int cols, const int iterations, const struct timespec ts_sleep, int **matrix)
{
    int lastColumnJ = cols - 1;

    // #pragma omp for ordered
    for (int k = 1; k <= iterations; k++)
    {
#pragma omp parallel \
    shared(matrix)
        {
            // #pragma omp critical
            // #pragma omp for
            // #pragma omp single
            for (int i = 0; i < rows; i++)
            {
                usleep(TIMEWAITMICRO);
                matrix[i][lastColumnJ] += i;
            }

            // no torsion applied
            // for (int i = 0; i < rows; i++)
            // {
            //     for (int j = 1; j <= lastColumnJ; j++)
            //     {
            //         matrix[i][lastColumnJ - j] += matrix[i][lastColumnJ - j + 1];
            //     }
            // }
            // TORSION, with if statement
// #pragma omp for collapse(2) -- doesn;'t wrk'
#pragma omp for
            for (int j = 1; j < cols + rows - 1; j++)
            {
                for (int i = max(0, j - cols + 1); i <= min(j, rows - 1); i++)
                {
                    if ((j - i) != 0)
                    {
                        usleep(TIMEWAITMICRO);
                        // #pragma omp critical
                        matrix[i][lastColumnJ - (j - i)] += matrix[i][(lastColumnJ - (j - i)) + 1];
                    }
                }
            }
        }
    }
}